//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Nucleotide_v3.Model;

namespace Nucleotide_v3.States
{
    [Serializable]
    public abstract class EdgeNodeState : NodeState
    {
        //public override void ChangeState(EdgeNodeStateContext context, NodeState nodeState)
        //{
        //    context.State = nodeState. // Not necessary to override.
        //    throw new System.NotImplementedException();
        //}
        protected internal virtual void ChangeStateContext(EdgeNodeStateContext context, NodeState nodeState,
            EdgeNodeStateContextContainer<EdgeNodeStateContext> contextContainer)
        {
            contextContainer.ChangeStateContext(context, nodeState);
        }
        [Obsolete("Warning: Use the other overload. This affects a flyweight.")]
        protected internal virtual void Cut(EdgeNodeStateContext context)
        {
            context.ChangeState(CutEdgeNodeState.Instance);
        }
        protected internal virtual void Cut<E>(E context, EdgeNodeStateContextContainer<E> contextContainer) where E : EdgeNodeStateContext, new()
        {
            contextContainer.ChangeStateContext(context, CutEdgeNodeState.Instance);
        }
        
        [Obsolete("Warning: Use the other overload. This affects a flyweight.")]
        protected internal virtual void Reset(EdgeNodeStateContext context)
        {
            context.ChangeState(UnchosenEdgeNodeState.Instance);
        }
        protected internal virtual void Reset<E>(E context, EdgeNodeStateContextContainer<E> contextContainer) where E : EdgeNodeStateContext, new()
        {
            contextContainer.ChangeStateContext(context, UnchosenEdgeNodeState.Instance);
        }
       
        [Obsolete("Warning: Use the other overload. This affects a flyweight.")]
        protected internal virtual void Choose(NodeStateContext context, NodeGender gender)
        {
            if (gender == NodeGender.Male)
            {
                context.ChangeState(MaleChosenEdgeNodeState.Instance);
            }
            if (gender == NodeGender.Female)
            {
                context.ChangeState(FemaleChosenEdgeNodeState.Instance);
            }
        }
        protected internal virtual void Choose<E>(E context, NodeGender gender, EdgeNodeStateContextContainer<E> contextContainer) where E : EdgeNodeStateContext, new()
        {
            if (gender == NodeGender.Male)
            {
                contextContainer.ChangeStateContext(context, MaleChosenEdgeNodeState.Instance);
            }
            if (gender == NodeGender.Female)
            {
                contextContainer.ChangeStateContext(context, FemaleChosenEdgeNodeState.Instance);
            }
        }
        
        protected internal virtual void ChooseAsMale<E>(E context, EdgeNodeStateContextContainer<E> contextContainer) where E : EdgeNodeStateContext, new()
        {
            contextContainer.Choose(context, NodeGender.Male);
        }
        
        protected internal virtual void ChooseAsFemale<E>(E context, EdgeNodeStateContextContainer<E> contextContainer) where E : EdgeNodeStateContext, new()
        {
            contextContainer.Choose(context, NodeGender.Female);
        }
       
    }
}

