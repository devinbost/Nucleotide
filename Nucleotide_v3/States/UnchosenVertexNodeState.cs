//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Nucleotide_v3.Model;

namespace Nucleotide_v3.States
{
    [Serializable]
    public class UnchosenVertexNodeState : VertexNodeState
    {
        private static volatile UnchosenVertexNodeState instance = null;
        //public override void Choose(VertexNodeStateContext context, NodeGender gender)
        //{ // This was implemented on the base class instead.
        //    if (gender == NodeGender.Male)
        //    {
        //        context.ChangeState(MaleChosenVertexNodeState.State);
        //    }
        //    if (gender == NodeGender.Female)
        //    {
        //        context.ChangeState(FemaleChosenVertexNodeState.State);
        //    }
            
        //}
        [Obsolete("Warning: Use the other overload. This affects a flyweight.")]
        protected internal override void Choose(VertexNodeStateContext context, NodeGender gender)
        {
            base.Choose(context, gender);
        }

        protected internal override void Choose<V>(V context, NodeGender gender, VertexNodeStateContextContainer<V> contextContainer)
        {
            base.Choose(context, gender, contextContainer);
        }
        [Obsolete("Warning: Use the other overload. This affects a flyweight.")]
        protected internal override void ChooseAsOrigin(VertexNodeStateContext context)
        {
            base.ChooseAsOrigin(context);
        }

        protected internal override void ChooseAsOrigin<V>(V context, VertexNodeStateContextContainer<V> contextContainer)
        {
            base.ChooseAsOrigin(context, contextContainer);
        }

        private UnchosenVertexNodeState()
        {
        
        }
        public static UnchosenVertexNodeState Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new UnchosenVertexNodeState();
                }
                return instance;
            }
        }
    }
}

