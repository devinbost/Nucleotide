//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;

namespace Nucleotide_v3.Model
{
    public abstract class NodeFactory<R> where R: Node, new()
    {
        protected static volatile NodeFactory<R> Instance = null;
        public virtual Dictionary<int, R> Values 
        {
            get;
            set;
        }

        /// <summary>
        /// This method constructs the specified node if it doesn't exist. If it does exist,
        /// then it simply returns it.
        /// </summary>
        /// <param name="nodePosition"></param>
        /// <returns></returns>
        public virtual R ConstructNode(int nodePosition)
        {
            if (Values == null)
            {
                Values = new Dictionary<int, R>();
            }
            lock (Values)
            {
                if (Values.ContainsKey(nodePosition))
                {
                    return Values[nodePosition];
                }
                var node = new R();
                node.Position = nodePosition;
                Values.Add(nodePosition, node);
                return Values[nodePosition];
            } 
        }

        protected NodeFactory()
        {
            if (this.Values == null)
            {
                this.Values = new Dictionary<int, R>();
            }
        }

        //static NodeFactory GetFactory()
        //{
        //    if (State == null)
        //    {
        //        State = new NodeFactory();
            
        //    }
        //    return State;
        //}
    }
}

