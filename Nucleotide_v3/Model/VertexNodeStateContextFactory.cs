//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.CodeDom;
using Nucleotide_v3.States;

namespace Nucleotide_v3.Model
{
    /// <remarks>NOT flyweight factories</remarks>
    public class VertexNodeStateContextFactory<VC> : NodeStateContextFactory<VC> where VC:VertexNodeStateContext, new()
    {
       
        ///// <summary>
        ///// This creates the default UnchosenVertexNodeState context.
        ///// </summary>
        ///// <param name="nodePosition"></param>
        ///// <returns></returns>
        //public virtual NodeStateContext ConstructNodeContext(int nodePosition)
        //{
        //    var node = this.ConstructNode(nodePosition);
        //    var context = new VertexNodeStateContext((VertexNode)node);
        //    return context;
        //}
        /// <summary>
        /// Note: This defaults to a state of UnchosenVertexNodeState.
        /// Otherwise, same as ConstructNodeContext(..) method.
        /// </summary>
        /// <param name="nodePosition"></param>
        /// <returns></returns>
        public override VC ConstructDefaultNodeContext(int nodePosition)
        {
            var factory = VertexNodeFactory.GetFactory();
            var context = ConstructNodeContext(
                            nodePosition: nodePosition,
                            nodeState: UnchosenVertexNodeState.Instance,
                            nodeFactory: factory);
            return context;
        }

        public override VC ConstructNodeContext<N>(int nodePosition, NodeState nodeState, NodeFactory<N> nodeFactory)
        {
            return base.ConstructNodeContext(nodePosition, nodeState, nodeFactory);
        }

        protected override N ConstructNode<N>(int nodePosition, NodeFactory<N> nodeFactory)
        {
            return base.ConstructNode(nodePosition, nodeFactory);
        }

       
        public VC ConstructNodeContext(int nodePosition, NodeState nodeState)
        {
            var nodeFactory = VertexNodeFactory.GetFactory();
            return base.ConstructNodeContext(nodePosition, nodeState, nodeFactory);
        }

        //protected internal override Node ConstructNode(int nodePosition)
        //{
        //    var vertexNodeFactory = VertexNodeFactory.GetFactory();
        //    return vertexNodeFactory.ConstructNode(nodePosition);
        //}

        //public override VertexNodeStateContext Construct(int nodePosition)
        //{
        //    var node = this.ConstructNode(nodePosition);
        //    var nodeState = this.ConstructNodeState(nodePosition);
        //    var context = new VertexNodeStateContext(node, nodeState);
        //    return (VertexNodeStateContext)nodeState;
        //}

        //public VertexNodeState ConstructNodeState(int nodePosition)
        //{
        //    return ConstructNodeState(nodePosition);
        //}

        //public VertexNode ConstructNode(int nodePosition)
        //{
        //    return base.ConstructNode(nodePosition);
        //}
    }
}

