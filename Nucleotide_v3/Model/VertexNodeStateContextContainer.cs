//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Nucleotide_v3.States;

namespace Nucleotide_v3.Model
{
    [Serializable]
    /// <remarks>The int in the Values dictionary is for the NodePositionId</remarks>
    public class VertexNodeStateContextContainer<V> : NodeStateContextContainer<V> 
        where V: VertexNodeStateContext, new()
    {
       
        protected internal VertexNodeStateContextContainer()
        {
            Values = new Dictionary<int, V>();
        }
        protected internal VertexNodeStateContextFlyweightFactory<V> ContextFactory
        {
            get { return VertexNodeStateContextFlyweightFactory<V>.GetInstance; }
        }
        /// <summary>
        /// This method takes the given context and updates the container to use a context with the new state.
        /// </summary>
        /// <param name="context"></param>
        /// <param name="state"></param>
        public void ChangeStateContext(V context, NodeState state)
        {
            var newContext = ContextFactory.ConstructNodeContext(context.Position, state);
            lock (this.Values)
            {
                this.Update(context.Position, newContext);
            }
        }
        protected internal IEnumerable<V> GetVertexNodesWithState(NodeState state)
        {
            var nodeContexts = this.Values.Values.Where(t => t.State == state);
            return nodeContexts;
        }
        public VertexNodeStateContextContainer<V> Copy()
        {
            var container = new VertexNodeStateContextContainer<V>();
            foreach (var nodeStateContext in this.Values)
            {
                container.Values.Add(nodeStateContext.Key, nodeStateContext.Value.Copy<V>(nodeStateContext.Value, ContextFactory));
            }
            return container;
        }
        public VertexNodeStateContextContainer<V> Copy(
            VertexNodeStateContextFactory<V> factory)
        {
            var container = new VertexNodeStateContextContainer<V>();
            foreach (var nodeStateContext in this.Values)
            {
                container.Values.Add(nodeStateContext.Key, nodeStateContext.Value.Copy<V>(nodeStateContext.Value, factory));
            }
            return container;
        }
        protected internal virtual void Choose(V context, NodeState.NodeGender gender)
        {
            context.State.Choose<V>(context, gender, this);
        }

        public virtual void ChooseAsMale(V context)
        {
            context.State.ChooseAsMale(context, this);
        }

        public virtual void ChooseAsFemale(V context)
        {
            context.State.ChooseAsFemale(context, this);
        }

        public virtual void ChooseAsOrigin(V context)
        {
            context.State.ChooseAsOrigin(context, this);
        }
        public virtual void Reset(V context)
        {
            context.State.Reset(context, this);
        }

    }
}

