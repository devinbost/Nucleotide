//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Nucleotide_v3.States;

namespace Nucleotide_v3.Model
{
    /// <summary>
    /// This factory constructs context objects for a particular node.
    /// This factory assumes that the nodes being constructed are flyweights, 
    /// so the provided factory should be a flyweight factory.
    /// </summary>
    /// <typeparam name="C">This should be a concrete NodeStateContext implementation (subtype).</typeparam>
    /// <typeparam name="N">This should be a concrete Node implementation (subtype).</typeparam>
    public abstract class NodeStateContextFactory<C> where C : NodeStateContext, new()
    {
        /// <summary>
        /// This method constructs node context objects.
        /// </summary>
        /// <param name="nodePosition">Try using a vertex's position.</param>
        /// <param name="nodeState">For example, try using: MaleChosenVertexNodeState.State</param>
        /// <param name="nodeFactory">This factory should be a flyweight factory. For example: Try using VertexNodeFactory.GetFactory()</param>
        public virtual C ConstructNodeContext<N>(int nodePosition, NodeState nodeState, NodeFactory<N> nodeFactory) where N : Node, new()
        {
            var node = this.ConstructNode(nodePosition, nodeFactory);
            var context = new C();
            context.Node = this.ConstructNode(nodePosition, nodeFactory);
            context.State = nodeState;
            return context;
        }

        public abstract C ConstructDefaultNodeContext(int nodePosition);
        //public virtual NodeState ConstructNodeState(NodeState nodeState)
        //{
        //    throw new System.NotImplementedException();
        //}

        protected virtual N ConstructNode<N>(int nodePosition, NodeFactory<N> nodeFactory) where N : Node, new()
        {
            var node = nodeFactory.ConstructNode(nodePosition);
            return node;
        }

    }

    public class NodeStateContextFlyweightFactory<C, N>
        where C : NodeStateContext, new()
        where N : Node, new()
    {
        
    }

}

