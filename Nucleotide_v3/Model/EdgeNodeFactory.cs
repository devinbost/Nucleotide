//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Nucleotide_v3.Model
{
    /// <remarks>Flyweight factories</remarks>
    public class EdgeNodeFactory : NodeFactory<EdgeNode>
    {
        private EdgeNodeFactory()
        {
            if (this.Values == null)
            {
                this.Values = new Dictionary<int, EdgeNode>();
            }
        }

        static public EdgeNodeFactory GetFactory()
        {
            if (Instance == null)
            {
                Instance = new EdgeNodeFactory();

            }
            return (EdgeNodeFactory)Instance;
            
        }

    
        //public new Dictionary<int, EdgeNode> Values { get; set; }
        /// <summary>
        /// This method returns a flyweight, so if the node was already constructed, we return the previously constructed instance.
        /// </summary>
        /// <param name="nodePosition"></param>
        /// <returns></returns>
        //public override Node ConstructNode(int nodePosition)
        //{
        //    lock (Values)
        //    {
        //        if (Values.ContainsKey(nodePosition))
        //        {
        //            return Values[nodePosition];
        //        }
        //        Values.Add(nodePosition, new EdgeNode(nodePosition));
        //        return Values[nodePosition];
        //    }
        //}
        //public EdgeNode GetEdgeNode(int nodePosition)
        //{
        //    lock (Values)
        //    {
        //        return (EdgeNode)ConstructNode(nodePosition);
        //    }
        //}

       // public new static EdgeNodeFactory State { get; set; }
    }
}

