//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Nucleotide_v3.States;

namespace Nucleotide_v3.Model
{
    [Serializable]
    /// <remarks>The int in the Values dictionary is for the NodePositionId</remarks>
    public class NodeStateContextContainer<C> where C : NodeStateContext, new()
    {
       
        protected internal virtual Dictionary<int, C> Values
        {
            get;
            set;
        }
        
        protected internal virtual C GetNodeByPosition(int nodePosition)
        {
            if (this.Values.ContainsKey(nodePosition))
            {
                return this.Values[nodePosition];
            }
            //throw new NullReferenceException("No node with specified nodePosition exists when calling GetNodeByPosition for EdgeNodeStateContext = " + nodePosition);
            return null;
        }
        
        /// <summary>
        /// This method adds the element if it doesn't exist. It makes no changes if the vertex already exists.
        /// (It also doesn't throw an error.)
        /// </summary>
        /// <param name="nodePosition"></param>
        /// <param name="edgeNodeStateContext"></param>
        public virtual void Add(int nodePosition, C edgeNodeStateContext)
        {
            if (!this.Values.ContainsKey(nodePosition))
            {
                this.Values.Add(nodePosition, edgeNodeStateContext);
            }
        }
        /// <summary>
        /// This method updates the element if it exists, or if it doesn't exist, then it adds the element.
        /// </summary>
        /// <param name="nodePosition"></param>
        /// <param name="edgeNodeStateContext"></param>
        public virtual void Update(int nodePosition, C edgeNodeStateContext)
        {
            lock (this.Values)
            {
                if (!this.Values.ContainsKey(nodePosition))
                {
                    this.Values.Add(nodePosition, edgeNodeStateContext);
                }
                else
                {
                    this.Values[nodePosition] = edgeNodeStateContext;
                }
            }
        }
        protected internal NodeStateContextContainer()
        {
            Values = new Dictionary<int, C>();
        }
        /// <summary>
        /// This method should return all nodeStateContext objects that have the specified state.
        /// </summary>
        /// <param name="state"></param>
        /// <returns></returns>
        protected internal IEnumerable<NodeStateContext> GetNodesWithState(NodeState state)
        {
            var nodeContexts = this.Values.Values.Where(t => t.State == state);
            return nodeContexts;
        }
        [Obsolete("Warning: Use the methods on the more specific classes. Those are the flyweight factories.")]
        public NodeStateContextContainer<C> Copy<N>(
            NodeStateContextFactory<C> contextFactory, NodeFactory<N> nodeFactory ) where N : Node, new()
        {
            var container = new NodeStateContextContainer<C>();
            foreach (var nodeStateContext in this.Values)
            {
                container.Values.Add(nodeStateContext.Key, nodeStateContext.Value.Copy<C, N>(contextFactory, nodeFactory));
            }
            return container;
        }
    }

}

